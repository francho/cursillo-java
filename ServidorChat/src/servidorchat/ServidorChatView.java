/*
 * ServidorChatView.java
 */
package servidorchat;

import es.random.java.chat.Mensaje;
import es.random.java.chat.Mensaje.Tipo;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 * The application's main frame.
 */
public class ServidorChatView extends FrameView
{

    private ArrayList<Usuario> lista;

    public ServidorChatView(SingleFrameApplication app)
    {
        super(app);

        initComponents();
        lista = new ArrayList<Usuario>();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener()
        {

            public void actionPerformed(ActionEvent e)
            {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++)
        {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener()
        {

            public void actionPerformed(ActionEvent e)
            {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {

            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName))
                {
                    if (!busyIconTimer.isRunning())
                    {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                }
                else if ("done".equals(propertyName))
                {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                }
                else if ("message".equals(propertyName))
                {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                }
                else if ("progress".equals(propertyName))
                {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox()
    {
        if (aboutBox == null)
        {
            JFrame mainFrame = ServidorChatApp.getApplication().getMainFrame();
            aboutBox = new ServidorChatAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        ServidorChatApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelTexto = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu menuFichero = new javax.swing.JMenu();
        javax.swing.JMenuItem elementoMenuSalir = new javax.swing.JMenuItem();
        elementoMenuIniciar = new javax.swing.JMenuItem();
        elementoMenuApagar = new javax.swing.JMenuItem();
        javax.swing.JMenu menuAyuda = new javax.swing.JMenu();
        javax.swing.JMenuItem elementoMenuAcercaDe = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        panelTexto.setEditable(false);
        panelTexto.setName("panelTexto"); // NOI18N
        jScrollPane1.setViewportView(panelTexto);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(servidorchat.ServidorChatApp.class).getContext().getResourceMap(ServidorChatView.class);
        menuFichero.setText(resourceMap.getString("menuFichero.text")); // NOI18N
        menuFichero.setName("menuFichero"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(servidorchat.ServidorChatApp.class).getContext().getActionMap(ServidorChatView.class, this);
        elementoMenuSalir.setAction(actionMap.get("quit")); // NOI18N
        elementoMenuSalir.setText(resourceMap.getString("elementoMenuSalir.text")); // NOI18N
        elementoMenuSalir.setName("elementoMenuSalir"); // NOI18N
        menuFichero.add(elementoMenuSalir);

        elementoMenuIniciar.setText(resourceMap.getString("elementoMenuIniciar.text")); // NOI18N
        elementoMenuIniciar.setName("elementoMenuIniciar"); // NOI18N
        elementoMenuIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciar(evt);
            }
        });
        menuFichero.add(elementoMenuIniciar);

        elementoMenuApagar.setText(resourceMap.getString("elementoMenuApagar.text")); // NOI18N
        elementoMenuApagar.setName("elementoMenuApagar"); // NOI18N
        menuFichero.add(elementoMenuApagar);

        menuBar.add(menuFichero);

        menuAyuda.setText(resourceMap.getString("menuAyuda.text")); // NOI18N
        menuAyuda.setName("menuAyuda"); // NOI18N

        elementoMenuAcercaDe.setAction(actionMap.get("showAboutBox")); // NOI18N
        elementoMenuAcercaDe.setText(resourceMap.getString("elementoMenuAcercaDe.text")); // NOI18N
        elementoMenuAcercaDe.setName("elementoMenuAcercaDe"); // NOI18N
        menuAyuda.add(elementoMenuAcercaDe);

        menuBar.add(menuAyuda);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private class Oyente implements Runnable
    {

        public void run()
        {
            try
            {
                int i = 1;
                ServerSocket s = new ServerSocket(4321);

                while (true)
                {
                    System.out.println("Me pongo a la escucha");
                    Socket incoming = s.accept();
                    System.out.println("Nueva conexion establecida");
                    System.out.println("Spawning " + i);
                    Usuario r = new Usuario(incoming.getRemoteSocketAddress().toString(), incoming);
                    lista.add(r);
                    Thread t = new Thread(r);
                    t.start();
                    i++;
                }
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }
    }

    private void iniciar(java.awt.event.ActionEvent evt)//GEN-FIRST:event_iniciar
    {//GEN-HEADEREND:event_iniciar
        Oyente miOyente = new Oyente();
        Thread t = new Thread(miOyente);
        t.start();
    }//GEN-LAST:event_iniciar

    private void notificarDesconexion(Usuario user)
    {
        System.out.println("Borro al usuario de la lista");
        lista.remove(user);
    }

    private void publicar(Mensaje m)
    {
        for (Usuario u : lista)
        {
            System.out.println("Mandando mensaje a: " + u.nombre);
            u.enviarMensaje(m);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem elementoMenuApagar;
    private javax.swing.JMenuItem elementoMenuIniciar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextPane panelTexto;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;

    public class Usuario implements Runnable
    {

        private String nombre;
        private Socket puerto;
        private ObjectOutputStream escritor;
        private ObjectInputStream lector;

        public Usuario(String nombre, Socket puerto)
        {
            this.nombre = nombre;
            this.puerto = puerto;
            inicializarFlujos();
        }

        private void inicializarFlujos()
        {
            try
            {
                if(puerto!= null)
                {
                    System.out.println("El socket no es nulo");
                    if(puerto.isBound())
                    {
                        System.out.println("El socket esta asignado a un puerto");
                    }
                    if(puerto.isClosed())
                    {
                        System.out.println("El socket esta cerrado");
                    }
                    else
                    {
                        System.out.println("El socket no esta cerrado");
                    }
                    if(puerto.isConnected())
                    {
                        System.out.println("El socket esta conectado");
                    }
                    if(puerto.isInputShutdown())
                    {
                        System.out.println("El puerto no tiene conexion de entrada");
                    }
                    if(puerto.isOutputShutdown())
                    {
                        System.out.println("El puerto no tiene conexion de salida");
                    }
                }
                escritor = new ObjectOutputStream(puerto.getOutputStream());
                lector = new ObjectInputStream(puerto.getInputStream());
            }
            catch (IOException ex)
            {
                Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        public void enviarMensaje(Mensaje nuevoMensaje)
        {
            try
            {
                escritor.writeObject(nuevoMensaje);
                escritor.flush();
            }
            catch (IOException ex)
            {
                Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        public void run()
        {
            Mensaje nuevoMensaje = new Mensaje();
            do
            {
                try
                {
                    nuevoMensaje = (Mensaje) lector.readObject();
                }
                catch(SocketException ex)
                {
                    nuevoMensaje.setTipo(Tipo.Salir);
                }
                catch (IOException ex)
                {
                    Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (ClassNotFoundException ex)
                {
                    Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (nuevoMensaje.getTipo() != Tipo.Salir)
                {
                    publicar(nuevoMensaje);
                }
                else
                {
                    enviarMensaje(nuevoMensaje);
                }
            }
            while (nuevoMensaje.getTipo() != Tipo.Salir);
            try
            {
                escritor.close();
                lector.close();
                    notificarDesconexion(this);
            }
            catch (IOException ex)
            {
                Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
